(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{411:function(t,e,_){"use strict";_.r(e);var v=_(44),i=Object(v.a)({},(function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"【随时记录】git笔记"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#【随时记录】git笔记"}},[t._v("#")]),t._v(" 【随时记录】Git笔记")]),t._v(" "),_("h2",{attrs:{id:"最基本"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#最基本"}},[t._v("#")]),t._v(" 最基本")]),t._v(" "),_("p",[t._v("初始化一个Git仓库，使用"),_("code",[t._v("git init")]),t._v("命令。\n"),_("strong",[t._v("添加文件")]),t._v("到Git仓库，分两步：")]),t._v(" "),_("ul",[_("li",[t._v("使用命令"),_("code",[t._v("git add <file>")]),t._v("，注意，可反复多次使用，添加多个文件；")]),t._v(" "),_("li",[t._v("使用命令"),_("code",[t._v("git commit -m <message>")]),t._v("，完成。")])]),t._v(" "),_("p",[_("strong",[t._v("状态查看：")])]),t._v(" "),_("ul",[_("li",[t._v("要随时掌握工作区的状态，使用"),_("code",[t._v("git status")]),t._v("命令。")]),t._v(" "),_("li",[t._v("如果"),_("code",[t._v("git status")]),t._v("告诉你有文件被修改过，用"),_("code",[t._v("git diff")]),t._v("可以查看修改内容。")])]),t._v(" "),_("h2",{attrs:{id:"版本回退"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#版本回退"}},[t._v("#")]),t._v(" "),_("strong",[t._v("版本回退：")])]),t._v(" "),_("ul",[_("li",[_("code",[t._v("HEAD")]),t._v("指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令"),_("code",[t._v("git reset --hard commit_id")]),t._v("。")]),t._v(" "),_("li",[t._v("穿梭前，用"),_("code",[t._v("git log")]),t._v("可以查看提交历史，以便确定要回退到哪个版本。")]),t._v(" "),_("li",[t._v("要重返未来，用"),_("code",[t._v("git reflog")]),t._v("查看命令历史，以便确定要回到未来的哪个版本。")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/beyondguo/mdnice_pictures/2021-6-25/1624615687282-image.png",alt:""}})]),t._v(" "),_("blockquote",[_("p",[t._v("Git跟踪并管理的是"),_("code",[t._v("修改")]),t._v("，而非"),_("code",[t._v("文件")]),t._v("。\n每次修改，如果不用"),_("code",[t._v("git add")]),t._v("到暂存区，那就不会加入到"),_("code",[t._v("commit")]),t._v("中。")])]),t._v(" "),_("p",[_("code",[t._v("git dif")]),t._v("f 是只比较比较工作区和暂存区（最后一次add）的区别，"),_("code",[t._v("git diff --cached")]),t._v("是只比较暂存区和版本库的区别，"),_("code",[t._v("git diff HEAD -- filename")]),t._v(" 是只比较工作区和版本库（最后一次commit）的区别。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/beyondguo/mdnice_pictures/2021-6-25/1624615698020-image.png",alt:""}})]),t._v(" "),_("p",[_("strong",[t._v("撤销修改：")])]),t._v(" "),_("ul",[_("li",[t._v("场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令"),_("code",[t._v("git checkout -- file")]),t._v("。")]),t._v(" "),_("li",[t._v("场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令"),_("code",[t._v("git reset HEAD <file>")]),t._v("，就回到了场景1，第二步按场景1操作。")]),t._v(" "),_("li",[t._v("场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考"),_("a",{attrs:{href:"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013744142037508cf42e51debf49668810645e02887691000",target:"_blank",rel:"noopener noreferrer"}},[t._v("版本回退"),_("OutboundLink")],1),t._v("一节，不过前提是没有推送到远程库。")])]),t._v(" "),_("h2",{attrs:{id:"删除文件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#删除文件"}},[t._v("#")]),t._v(" "),_("strong",[t._v("删除文件：")])]),t._v(" "),_("p",[t._v("当你要删除文件的时候，可以采用命令：  rm test.txt"),_("br"),t._v("\n这个时候（也就是说这个时候只执行了  rm test.txt  ）有两种情况:\n"),_("strong",[t._v("第一种情况")]),t._v(":\n的确要把test.txt删掉，那么可以执行\n"),_("code",[t._v("git rm test.txt")]),t._v(" "),_("code",[t._v('git commit -m "remove test.txt"')]),t._v("\n然后文件就被删掉了\n"),_("strong",[t._v("第二种情况")]),t._v(":\n删错文件了，不应该删test.txt，注意这时只执行了"),_("code",[t._v("rm test.txt")]),t._v("，还没有提交，所以可以执行"),_("code",[t._v("git checkout test.txt")]),t._v("将文件恢复。")]),t._v(" "),_("p",[t._v("并不是说执行完"),_("code",[t._v('git commit -m "remove test.txt"')]),t._v("后还能用"),_("code",[t._v("checkout")]),t._v("恢复，"),_("code",[t._v("commit")]),t._v("之后版本库里的文件也没了，自然没办法用"),_("code",[t._v("checkout")]),t._v("恢复，而是要用其他的办法.")]),t._v(" "),_("h2",{attrs:{id:"添加远程库关联"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#添加远程库关联"}},[t._v("#")]),t._v(" "),_("strong",[t._v("添加远程库关联：")])]),t._v(" "),_("p",[_("code",[t._v("$ git remote add origin git@github.com:beyondguo/JD_CV_Match.git")]),t._v("\n后面git@github.com:beyondguo/JD_CV_Match.git从GitHub上复制。")]),t._v(" "),_("p",[t._v("然后用\n"),_("code",[t._v("git add .")]),t._v("来添加本地目录的所有文件。再"),_("code",[t._v('git commit -m "some comments"')]),t._v("提交一下。\n最后，通过"),_("code",[t._v("git push -u origin master")]),t._v("把文件全部推送到远程库。"),_("code",[t._v("-u")]),t._v("在第一次推送的时候添加，之后就不用了。\n如果需要把远程库的东西同步到本地，用"),_("code",[t._v("git pull origin master")]),t._v("。")]),t._v(" "),_("p",[t._v("当你本地修改了文件，放心地把所有文件都add，一次性commit，一次性push，git只会提交你的修改，所有不用担心每次都全部重新上传。而且你在commit中写的comment，也只会在修改的文件的备注里显示。")]),t._v(" "),_("h2",{attrs:{id:"报错"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#报错"}},[t._v("#")]),t._v(" 报错")]),t._v(" "),_("blockquote",[_("p",[t._v("fatal: remote origin already exists.")])]),t._v(" "),_("p",[t._v("解决方法：把远程库给删了：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/beyondguo/mdnice_pictures/2021-6-25/1624615711843-image.png",alt:""}})]),t._v(" "),_("blockquote",[_("p",[t._v("hint: Updates were rejected because the remote contains work that you do\nhint: not have locally.")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/beyondguo/mdnice_pictures/2021-6-25/1624615719883-image.png",alt:""}})]),t._v(" "),_("p",[t._v("解决方法：一般是由于远程库里面有你本地库没有的，比如你创建的时候多了一个readme文件，但是本地没有。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/beyondguo/mdnice_pictures/2021-6-25/1624615727956-image.png",alt:""}})]),t._v(" "),_("h2",{attrs:{id:"使用本地强制覆盖远程仓库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#使用本地强制覆盖远程仓库"}},[t._v("#")]),t._v(" 使用本地强制覆盖远程仓库")]),t._v(" "),_("p",[t._v("git push origin 分支名 --force")]),t._v(" "),_("h2",{attrs:{id:"添加多个远程仓库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#添加多个远程仓库"}},[t._v("#")]),t._v(" 添加多个远程仓库")]),t._v(" "),_("p",[_("code",[t._v("git remote add [name] 地址")])]),t._v(" "),_("p",[t._v("原来之前的"),_("code",[t._v("git add origin 地址")]),t._v("以及"),_("code",[t._v("git push origin master")]),t._v("中的orgin都是一个名称，默认的初始仓库都是origin。所以新建的远程仓库，需要换个别的名字，比如lab，然后push的时候也使用新的名字，比如：")]),t._v(" "),_("p",[_("code",[t._v("git remote add git@github.com:SUFE-AILAB/STA.git")])]),t._v(" "),_("p",[_("code",[t._v("git push lab master")])]),t._v(" "),_("p",[t._v("可以通过"),_("code",[t._v("git remote -v")]),t._v("来查看远程仓库的情况。")]),t._v(" "),_("h2",{attrs:{id:"多人-多设备协作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#多人-多设备协作"}},[t._v("#")]),t._v(" 多人/多设备协作")]),t._v(" "),_("p",[t._v("首先一个地方（人、设备）建立仓库。确保两个地方都添加了ssh key。")]),t._v(" "),_("p",[t._v("另一个地方直接git clone下来，然后就可以直接进行修改，然后git add-commit-push了，不会有冲突。")]),t._v(" "),_("p",[t._v("在一个地方修改并push之后，另一个地方在修改前，必须先进行git pull。")]),t._v(" "),_("p",[t._v("几个细节：")]),t._v(" "),_("ol",[_("li",[t._v("git clone之后，不需要git remote add远程仓库，可以直接修改提交。")]),t._v(" "),_("li",[t._v("git add *似乎只会提交可见文件，所以用它的话，就不会把 .ipynb_checkpoints 和 .gitignore 还有 .DS_store这些文件同步。而使用git add -A则是把所有文件包括隐藏文件都同步。一般.gitignore我还是想同步的，所以就需要在.gitignore里面把我们不想上传的隐藏文件都添加进来，然后再使用git add -A")]),t._v(" "),_("li",[t._v("git add -A 跟 git add * 还有个不同在于，如果我对文件夹或者文件进行的位置的移动，或者删除了某个文件。用 * 的话，原本的文件是不会被删掉的，相当于只是复制了一份到新地址了，但是 -A 的话，得到的文件目录就跟你本地是一样的了。")])]),t._v(" "),_("h2",{attrs:{id:"关于ssh-key"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#关于ssh-key"}},[t._v("#")]),t._v(" 关于ssh key")]),t._v(" "),_("p",[t._v("ssh key的生成：")]),t._v(" "),_("p",[_("code",[t._v("ssh-keygen -t rsa")])]),t._v(" "),_("p",[t._v("会告诉你默认地址，去那里复制，也可以直接通过"),_("code",[t._v("vim ~/.ssh/id_rsa.pub")]),t._v("命令查看，然后贴到github。"),_("strong",[t._v("注意：每次运行，生成的都是不一样的！")])]),t._v(" "),_("p",[t._v("同一个pub key，只能放在一个账号里，所以同一个设备如果pub key希望对应多个账号，就需要多生成pub key。")])])}),[],!1,null,null,null);e.default=i.exports}}]);